apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    //implementation 'org.testng:testng:7.5'
    implementation 'org.testng:testng:7.0.0'                    //для совместимости чтобы запускать в jenkins
    //implementation 'org.seleniumhq.selenium:selenium-java:4.7.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.3.0'
    implementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    implementation 'com.beust:jcommander:1.48'                  //для командной строки
    implementation 'com.thoughtworks.xstream:xstream:1.4.18'    //для работы c XML
    implementation 'com.google.code.gson:gson:2.10'             //для работы с JSON
    implementation 'ch.qos.logback:logback-classic:1.1.5'       //для работы с логами
    implementation 'mysql:mysql-connector-java:5.1.48'          //для работы с БД MySql
    implementation 'org.hibernate:hibernate-core:5.6.10.Final'  //ORM (для работы с БД)
}

//указали использовать фреймворк TestNG
//запуск тестового набора для групп
task testGroups(type: Test) {
    useTestNG {
        //указали какой конфиг тестового набора должны использовать
        suites 'src/test/resources/testng-groups.xml'
    }

    //передача системных свойств сборщику Gradle (определенные параметры запуска, например используемый тип браузера)
    // при запуске тестов из консоли (gradlew -Pbrowser=chrome testContacts)

    //проверка указан ли тип браузера при запуске из командн стр, если нет то используем дефолтн зн-е браузера в TestBase
    if (project.hasProperty('browser')) {
        //${browser} для того чтобы системные свойства сборщика преобразовать в обычные системные свойства для офмф
        systemProperty 'browser', "${browser}"
    }

    //передача платформы
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }

    //пробрасываем свойство target в java машину
    /*
    свойство target – в качестве параметра передаем в командную строку имя конфигурационного файла, в котором хранится инф-ия
    о тестируемой системе, например имя local (тогда инф-ия будет загружена из ../resources/local/properties)
    */
    if (project.hasProperty('target')) {
        //${browser} для того чтобы системные свойства сборщика преобразовать в обычные системные свойства для офмф
        systemProperty 'browser', "${browser}"
    }

    //пробрасываем свойство verifyUI в java машину - вкл/выкл проверки загрузки данных из UI для тестов
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
}

//указали использовать фреймворк TestNG
//запуск тестового набора для групп
task testContacts(type: Test) {
    useTestNG {
        //указали какой конфиг тестового набора должны использовать
        suites 'src/test/resources/testng-contacts.xml'
    }
    //передача системных свойств сборщику Gradle (определенные параметры запуска, например используемый тип браузера)
    // при запуске тестов из консоли (gradlew -Pbrowser=chrome testContacts)

    //проверка указан ли тип браузера при запуске из командн стр, если нет то используем дефолтн зн-е браузера указанное в TestBase
    if (project.hasProperty('browser')) {
        //${browser} для того чтобы свойства сборщика преобразовать в обычные системные свойства для java машины
        systemProperty 'browser', "${browser}"
    }

    //передача платформы
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }

    //пробрасываем свойство target в java машину
    if (project.hasProperty('target')) {
        //${browser} для того чтобы системные свойства сборщика преобразовать в обычные системные свойства для java машины
        systemProperty 'browser', "${browser}"
    }

    //пробрасываем свойство verifyUI в java машину - вкл/выкл проверки загрузки данных из UI для тестов
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }

}